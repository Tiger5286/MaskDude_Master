#pragma once
#include "Vec2.h"
#include "Game.h"

// 定数定義
namespace
{
	// 地形画像情報
	constexpr int kGraphWidth = 352;	// 画像の横幅
	constexpr int kGraphHeight = 176;	// 画像の縦幅
	constexpr int kGraphChipSize = 16;	// 画像の1チップのサイズ（16x16ピクセル）
	constexpr int kGraphChipNumX = kGraphWidth / kGraphChipSize;	// 22	// 画像の横チップ数
	constexpr int kGraphChipNumY = kGraphHeight / kGraphChipSize;	// 11	// 画像の縦チップ数

	// 描画用の画像情報	(元画像より2倍のサイズで描画するため、チップサイズも2倍)
	constexpr int kDrawChipSize = kGraphChipSize * 2;	// 32	// 描画用の1チップのサイズ（32x32ピクセル）
	constexpr int kDrawChipNumX = Game::kScreenWidth / kDrawChipSize;	// 40	// 描画するチップの横チップ数
	constexpr int kDrawChipNumY = Game::kScreenHeight / kDrawChipSize + 1;	// 22 + 1 (22.5)	// 描画するチップの縦チップ数(+1は画面の端まで描画するため)

	constexpr int kBrickChipNum = 106;
	constexpr int kBlockChipNum = 34;

	constexpr int kMapChip[kDrawChipNumY][kDrawChipNumX] = {
		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},
		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},
		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},
		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},
		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},

		{ 34, 34, 34, 34, 34,  34, 34, 34, 34, 34,  34, 34, 34, 34, 34,  34, 34,  5,  5,  5,   5,  5,  5, 34, 34,  34, 34, 34, 34, 34,  34, 34, 34, 34, 34,  34, 34, 34, 34, 34,},
		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},
		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},
		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},
		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},

		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,  34, 34, 34, 34, 34,  34, 34, 34, 34, 34,  34, 34, 34, 34, 34,  34, 34, 34, 34, 34,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},
		{ 34, 34, 34, 34, 34,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,  34, 34, 34, 34, 34,},
		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},
		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},
		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},

		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},
		{ 34, 34, 34, 34, 34,  34, 34, 34, 34, 34,  34, 34, 34, 34, 34,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,  34, 34, 34, 34, 34,  34, 34, 34, 34, 34,  34, 34, 34, 34, 34,},
		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},
		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},
		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},

		{  5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,   5,  5,  5,  5,  5,},
		{106,106,106,106,106, 106,106,106,106,106, 106,106,106,106,106, 106,106,106,106,106, 106,106,106,106,106, 106,106,106,106,106, 106,106,106,106,106, 106,106,106,106,106,},
		{128,128,128,128,128, 128,128,128,128,128, 128,128,128,128,128, 128,128,128,128,128, 128,128,128,128,128, 128,128,128,128,128, 128,128,128,128,128, 128,128,128,128,128 }
	};
}

class Map
{
public:
	/// <summary>
	/// コンストラクタ
	/// </summary>
	Map();

	/// <summary>
	/// デストラクタ
	/// </summary>
	~Map();

	/// <summary>
	/// 初期化
	/// </summary>
	void Init();

	/// <summary>
	/// 終了処理
	/// </summary>
	void End();

	/// <summary>
	/// 更新処理
	/// </summary>
	void Update();

	/// <summary>
	/// 描画処理
	/// </summary>
	void Draw();

	void DrawPipe();

	/// <summary>
	/// グラフィックハンドルを設定する
	/// </summary>
	/// <param name="terrainHandle">マップチップのグラフィックハンドル</param>
	/// <param name="smallPipeHandle">画面下にある小さい土管のグラフィックハンドル</param>
	/// <param name="bigPipeHandle">画面上にある長い土管のグラフィックハンドル</param>
	void SetHandle(int terrainHandle,int smallPipeHandle, int bigPipeHandle);

	// 当たり判定チェック用関数
	bool CheckCollision(Vec2 playerPos, Vec2 playerSize, Vec2& hitPos)const;
	bool IsBlockChip(int chipNum)const;	// ブロックかどうかを判定

private:
	// グラフィックハンドル
	int m_terrainHandle;
	int m_smallPipeHandle;
	int m_bigPipeHandle;
};

